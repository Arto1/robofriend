{"version":3,"sources":["actions/constants.js","reducers/searchRobotsReducer.js","reducers/requestRobotsReducer.js","reducers/index.js","store/index.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions/index.js","serviceWorker.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","combineReducers","searchRobots","state","action","type","CONSTANTS","payload","requestRobots","Object","assign","logger","createLogger","store","createStore","reducers","applyMiddleware","thunkMiddleware","Card","name","email","id","className","src","alt","CardList","renderRobots","map","itm","key","SearchBox","searchChange","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","info","console","log","this","setState","Component","CounterButton","updateCount","count","color","onClick","PureComponent","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","x","toLowerCase","includes","connect","dispatch","event","text","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9f5845cb.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import * as CONSTANTS from '../actions/constants';\r\n\r\nconst initialStateSearch = { searchField: '' };\r\nexport default (state = initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CONSTANTS.CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n            // return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as CONSTANTS from '../actions/constants';\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport default (state = initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case CONSTANTS.REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: action.payload});\r\n        case CONSTANTS.REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false});\r\n        case CONSTANTS.REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false});    \r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport searchRobots from './searchRobotsReducer';\r\nimport requestRobots from './requestRobotsReducer';\r\n\r\nexport default combineReducers({\r\n    searchRobots,\r\n    requestRobots\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducers from '../reducers/index';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware, logger));\r\nexport default store","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList = ({robots}) => {\r\n    const renderRobots = robots.map(itm => { return <Card key={itm.id} id={itm.id} name={itm.name} email={itm.email} /> });\r\n    return (<div>\r\n        {renderRobots}\r\n    </div>)\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <input type=\"search\" placeholder=\"Search Robots\" onChange={searchChange}\r\n        className=\"pa3 ba b--green bg-lightest-blue\" />\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info);\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good.</h1>   \r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     if (this.state.count !== nextState.count) {\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1 }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count {this.state.count}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">Robot Friends</h1>\r\n                <CounterButton color={'red'}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport '../styles/App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions/index';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots, \r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => { \r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(x => x.name.toLowerCase().includes(searchField.toLowerCase()));\r\n        if (isPending) {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Loading..</h1>\r\n                </div>)\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import * as CONSTANTS from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CONSTANTS.CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: CONSTANTS.REQUEST_ROBOTS_PENDING, payload: true});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: CONSTANTS.REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(err => dispatch({type: CONSTANTS.REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store';\r\nimport './styles/index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}